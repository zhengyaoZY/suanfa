package com.flywhale.suanfa;

import java.util.*;

/**
 * 给定长度为偶数的整数数组，该数组中不同的数字代表不同种类的糖果， 每个数字表示一种糖果。 您需要将这些糖果平均分配给弟弟和妹妹。 返回妹妹可以获得的糖果种类的最大数量。
 */
public class FenTangGuo {

    public static int distributeCandies(int[] candies) {

        Set<Integer> num = new HashSet<>();
        for(int i=0; i< candies.length;i ++){
            num.add(candies[i]);
        }
        return Math.min(num.size(), candies.length/2);
    }

    public static void main(String[] args) {
        //int[] candies = new int[]{1214,1974,9766,3881,125,397,3478,4533,6934,443,6406,6156,2330,3038,6526,9052,7710,1565,9203,3439,5619,2937,3590,709,7437,1580,1398,159,7381,9634,9894,2362,4586,2048,1992,7781,3426,9077,5161,9825,2430,987,4630,3557,9403,858,892,6779,805,6394,9934,8251,5462,7618,9615,1921,220,2402,1231,6301,5945,3001,9394,9159,324,948,2636,2221,2988,7316,2985,1595,4093,9867,1241,3990,3051,5394,8344,2661,4587,7402,1244,28,1825,7021,5623,502,3540,4976,7165,7102,9054,8488,3663,2458,4192,6805,9238,7829,5394,3583,9739,3336,3143,988,6402,5092,1999,2156,6952,926,7110,3969,3025,5991,1962,8446,8164,5591,5721,4698,4291,5302,9321,5521,1617,3527,5554,6520,424,9841,8422,5275,1811,8522,3392,3972,9286,563,9706,378,9118,7290,1640,9332,2642,9856,1250,568,3624,3304,6992,2725,6773,1720,4989,1209,6684,9152,2110,8928,3080,5252,9052,7770,6805,7,1084,5079,3224,9158,896,5825,6942,2446,8551,134,5922,4443,4447,7697,3848,5774,8603,9220,7127,169,79,2388,4372,1722,3448,3425,9785,7219,1529,353,9908,1650,6048,3832,7403,98,775,309,7326,1292,7622,6940,5557,4075,6837,7339,9656,7931,6879,1324,9438,8621,1779,22,4012,426,6612,592,3759,977,1648,4467,1909,111,5038,8667,8694,6330,1584,10,400,4330,7048,2121,5216,8725,887,4668,6924,9013,5089,1184,8076,6567,5148,1427,2986,8227,6838,1920,9359,7955,1110,2614,1372,8882,8411,6388,7434,5971,4434,8884,537,3851,7587,593,6597,1596,922,6646,7735,7215,3763,3172,4952,8636,3182,7551,4432,2793,5843,2358,9260,2349,5391,9453,3997,2608,3324,8073,2413,2673,4942,743,8797,7827,3274,6985,1130,8453,7889,1166,2335,957,3434,3869,499,7104,2302,1726,18,496,6093,9381,3546,354,8974,1787,9788,8923,3091,7707,626,1208,2267,9254,7008,3062,2817,5524,3795,8500,4977,440,8854,3171,8523,8526,6723,5254,3328,1715,5254,2476,8169,8401,893,5640,9512,4406,9980,713,6726,112,1758,5755,3707,3783,7061,6041,6619,7431,770,2540,5902,3048,192,565,3640,3131,3163,7747,4231,4052,8222,8370,3164,5647,9898,9104,9344,6560,2850,9533,5447,2539,4739,1646,2002,6796,9010,1278,6238,5621,9901,9986,4986,242,6915,8487,2935,1881,6671,3723,3656,5315,8847,6692,9928,7378,7908,7713,7834,8895,1042,5675,3148,833,4439,7799,661,891,9785,7371,541,3010,2407,3962,8156,9961,3521,3470,1722,8492,5060,3265,4582,8534,8061,4520,6546,5631,9183,6797,4587,5605,4128,3175,4647,4933,8541,4616,6695,9014,846,2307,3228,8387,4709,9847,5718,2403,6399,4333,3991,1159,2797,8362,2406,47,2908,3137,9359,5833,5840,5769,6311,7863,2688,517,6958,1515,6570,694,5037,7138,4567,5530,5295,1291,2313,974,3228,3299,4081,3416,3952,414,8558,9114,8443,5139,7903,3795,5265,6356,5546,4728,7265,1529,7621,8042,7523,6920,7089,5812,235,5539,2246,4932,8858,7039,4761,4243,3331,1452,123,2851,1707,5093,6843,6196,4330,6022,5164,8498,5230,8997,2001,6239,5118,4495,2868,2937,4524,48,8934,151,5364,8061,5456,9397,513,2770,6281,9114,271,5875,2880,6498,8363,1329,1449,4109,6438,3996,6069,5491,2008,5983,2041,6242,5922,1837,5937,3637,9564,8117,2509,4259,9164,804,5369,5586,520,3512,4795,7462,659,7997,3318,3145,5267,2358,7339,8792,2004,7609,9119,2472,4485,4263,5655,948,2607,1414,2911,8164,6198,4285,2283,1595,5800,8796,1765,8381,9763,214,7461,9643,4339,1708,6063,7261,2697,279,4629,5082,2567,1345,3789,2759,3527,9968,734,4762,6252,4704,5732,4569,7888,8124,291,68,4604,1273,7319,44,646,9679,1034,3999,5157,4837,7679,3713,3600,2536,3548,8663,9124,3015,7877,9043,8100,2862,5330,7832,43,782,9362,8153,7453,7957,5433,5202,6219,3055,6981,5042,2245,5400,526,3508,746,8460,1708,1928,3147,9278,5155,5027,2830,3569,8137,7520,4655,7318,3704,4497,9536,6355,4062,662,7712,9708,4593,7704,5898,8177,3569,627,3860,420,5398,2366,600,7637,1864,1192,5104,7196,7630,9281,5530,1010,2526,434,6907,1516,3522,682,5616,1780,6604,854,8095,3958,2384,8203,9548,4085,5760,515,8232,5687,8629,4178,323,9044,1192,3621,3186,1670,1969,6742,4892,9437,5863,6285,526,8578,3206,3814,6575,2182,9295,1627,5261,7622,8121,2735,3414,1037,6757,3367,6931,5718,6031,4532,4158,8268,1008,4625,997,3505,7713,9653,6791,439,9674,4806,9275,9582,4072,9931,4656,9963,6061,7579,2398,3969,2240,7159,5435,5470,2774,7073,8938,6229,9385,1672,5598,355,7812,4705,6013,6672,6321,2932,4879,2308,7337,3247,1478,7556,9915,9659,2535,9720,1992,889,7942,2666,5610,6920,4016,6812,2885,2439,9633,3670,4278,1553,4375,2716,3512,8730,8622,2536,8229,5220,9289,4313,713,8382,6050,8887,9506,3274,2633,81,4292,6810,2969,6277,3562,2086,1176,2028,711,4428,4733,2959,10,1812,2475,1290,3615,5599,6028,2252,5666,6140,5225,8792,5726,4278,8037,7483,3012,5454,3530,5114,8583,192,7195,5031,1060,7732,6632,5247,5583,7396,2880,9940,6089,5653,5601,1778,622,6340,1211,7536,6570,5198,4338,6550,7532,7675,9122,9045,1186,3688,3677,9958,4836,7024,1760,2627,7997,551,6388,7964,3651,3299,9535,1096,2424,4647,4587,6953,9849,6237,1343,7849,4963,9727,6937,1830,998,8194,7645,3624,9442,6399,583,7915,3134,5247,8732,8430,4807,7971,1311,4310,2245,2125,2223,1647,826,6863,5917,6209,1395,4446,6668,2171,3489,1650,497,4238,7249,7085,890,2760,4823,7413,3515,7980,10,2336};
        int[] candies = new int[]{1,1};
        System.out.println(FenTangGuo.distributeCandies(candies));
        System.out.println(FenTangGuo.distributeCandies2(candies));
    }

    public static int distributeCandies2(int[] candies) {
        // write your code here
        Arrays.sort(candies);
        int a=1;
        for(int i=1;i<candies.length;i++){
            if(candies[i]!=candies[i-1]){
                a++;
            }
        }
        int b=candies.length/2;
        return Math.min(a, b);
    }

}
